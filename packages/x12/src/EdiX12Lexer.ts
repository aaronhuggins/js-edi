// Generated from grammars/x12/EdiX12Lexer.g4 by ANTLR 4.9.0-SNAPSHOT


// This statement may be removed once option `superClass` is correctly generated by antlr4ts.
import { X12BaseLexer } from "./X12BaseLexer";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class EdiX12Lexer extends X12BaseLexer {
	public static readonly DataSeparator = 1;
	public static readonly RepititionSeparator = 2;
	public static readonly ComponentSeparator = 3;
	public static readonly SegmentTerminator = 4;
	public static readonly EndOfLine = 5;
	public static readonly ControlChar = 6;
	public static readonly Char = 7;
	public static readonly InterchangeHeader = 8;
	public static readonly InterchangeTrailer = 9;
	public static readonly GroupHeader = 10;
	public static readonly GroupTrailer = 11;
	public static readonly TransactionHeader = 12;
	public static readonly TransactionTrailer = 13;
	public static readonly Tag = 14;
	public static readonly NonPrintable = 15;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "HT", "LF", "VT", "FF", 
		"CR", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "FS", "GS", "RS", 
		"US", "AsciiControl", "Number", "Letter", "Special", "ControlChar", "Char", 
		"InterchangeHeader", "InterchangeTrailer", "GroupHeader", "GroupTrailer", 
		"TransactionHeader", "TransactionTrailer", "Tag", "NonPrintable",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'ISA'", "'IEA'", "'GS'", "'GE'", "'ST'", "'SE'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DataSeparator", "RepititionSeparator", "ComponentSeparator", 
		"SegmentTerminator", "EndOfLine", "ControlChar", "Char", "InterchangeHeader", 
		"InterchangeTrailer", "GroupHeader", "GroupTrailer", "TransactionHeader", 
		"TransactionTrailer", "Tag", "NonPrintable",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(EdiX12Lexer._LITERAL_NAMES, EdiX12Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return EdiX12Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(EdiX12Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "EdiX12Lexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return EdiX12Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return EdiX12Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return EdiX12Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return EdiX12Lexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 27:
			this.ControlChar_action(_localctx, actionIndex);
			break;

		case 28:
			this.Char_action(_localctx, actionIndex);
			break;

		case 36:
			this.NonPrintable_action(_localctx, actionIndex);
			break;
		}
	}
	private ControlChar_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.handleControlChars(EdiX12Lexer) 
			break;

		case 1:
			 this.handleControlChars(EdiX12Lexer) 
			break;

		case 2:
			 this.handleControlChars(EdiX12Lexer) 
			break;

		case 3:
			 this.handleControlChars(EdiX12Lexer) 
			break;

		case 4:
			 this.handleControlChars(EdiX12Lexer) 
			break;
		}
	}
	private Char_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.handleControlChars(EdiX12Lexer) 
			break;
		}
	}
	private NonPrintable_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.handleControlChars(EdiX12Lexer) 
			break;

		case 7:
			 this.handleControlChars(EdiX12Lexer) 
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 27:
			return this.ControlChar_sempred(_localctx, predIndex);

		case 28:
			return this.Char_sempred(_localctx, predIndex);

		case 36:
			return this.NonPrintable_sempred(_localctx, predIndex);
		}
		return true;
	}
	private ControlChar_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.isCtlCharPos ;

		case 1:
			return  this.isCtlCharPos ;

		case 2:
			return  this.isCtlCharPos ;

		case 3:
			return  this.isCtlCharPos ;

		case 4:
			return  this.isCtlCharPos ;
		}
		return true;
	}
	private Char_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return  !this.isCtlCharPos ;
		}
		return true;
	}
	private NonPrintable_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return  !this.isCtlCharPos ;

		case 7:
			return  !this.isCtlCharPos ;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x11\xE4\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19" +
		"\x93\n\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x05\x1D\xB0\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x05\x1E\xB8\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03" +
		" \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$" +
		"\x03%\x03%\x03%\x05%\xD1\n%\x03%\x03%\x07%\xD5\n%\f%\x0E%\xD8\v%\x03&" +
		"\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\xE3\n&\x02\x02\x02\'\x03" +
		"\x02\x02\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02" +
		"\x02\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02\x02\x1B\x02" +
		"\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02" +
		"\x02+\x02\x02-\x02\x02/\x02\x021\x02\x023\x02\x025\x02\x027\x02\x029\x02" +
		"\b;\x02\t=\x02\n?\x02\vA\x02\fC\x02\rE\x02\x0EG\x02\x0FI\x02\x10K\x02" +
		"\x11\x03\x02\x04\x04\x02C\\c|\x06\x02\"1<B]b}\x80\x02\xE8\x029\x03\x02" +
		"\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02" +
		"\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03" +
		"\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x03M\x03\x02\x02" +
		"\x02\x05O\x03\x02\x02\x02\x07Q\x03\x02\x02\x02\tS\x03\x02\x02\x02\vU\x03" +
		"\x02\x02\x02\rW\x03\x02\x02\x02\x0FY\x03\x02\x02\x02\x11[\x03\x02\x02" +
		"\x02\x13]\x03\x02\x02\x02\x15_\x03\x02\x02\x02\x17a\x03\x02\x02\x02\x19" +
		"c\x03\x02\x02\x02\x1Be\x03\x02\x02\x02\x1Dg\x03\x02\x02\x02\x1Fi\x03\x02" +
		"\x02\x02!k\x03\x02\x02\x02#m\x03\x02\x02\x02%o\x03\x02\x02\x02\'q\x03" +
		"\x02\x02\x02)s\x03\x02\x02\x02+u\x03\x02\x02\x02-w\x03\x02\x02\x02/y\x03" +
		"\x02\x02\x021\x92\x03\x02\x02\x023\x94\x03\x02\x02\x025\x96\x03\x02\x02" +
		"\x027\x98\x03\x02\x02\x029\xAF\x03\x02\x02\x02;\xB7\x03\x02\x02\x02=\xB9" +
		"\x03\x02\x02\x02?\xBD\x03\x02\x02\x02A\xC1\x03\x02\x02\x02C\xC4\x03\x02" +
		"\x02\x02E\xC7\x03\x02\x02\x02G\xCA\x03\x02\x02\x02I\xCD\x03\x02\x02\x02" +
		"K\xE2\x03\x02\x02\x02MN\x07\x03\x02\x02N\x04\x03\x02\x02\x02OP\x07\x04" +
		"\x02\x02P\x06\x03\x02\x02\x02QR\x07\x05\x02\x02R\b\x03\x02\x02\x02ST\x07" +
		"\x06\x02\x02T\n\x03\x02\x02\x02UV\x07\x07\x02\x02V\f\x03\x02\x02\x02W" +
		"X\x07\b\x02\x02X\x0E\x03\x02\x02\x02YZ\x07\t\x02\x02Z\x10\x03\x02\x02" +
		"\x02[\\\x07\v\x02\x02\\\x12\x03\x02\x02\x02]^\x07\f\x02\x02^\x14\x03\x02" +
		"\x02\x02_`\x07\r\x02\x02`\x16\x03\x02\x02\x02ab\x07\x0E\x02\x02b\x18\x03" +
		"\x02\x02\x02cd\x07\x0F\x02\x02d\x1A\x03\x02\x02\x02ef\x07\x13\x02\x02" +
		"f\x1C\x03\x02\x02\x02gh\x07\x14\x02\x02h\x1E\x03\x02\x02\x02ij\x07\x15" +
		"\x02\x02j \x03\x02\x02\x02kl\x07\x16\x02\x02l\"\x03\x02\x02\x02mn\x07" +
		"\x17\x02\x02n$\x03\x02\x02\x02op\x07\x18\x02\x02p&\x03\x02\x02\x02qr\x07" +
		"\x19\x02\x02r(\x03\x02\x02\x02st\x07\x1E\x02\x02t*\x03\x02\x02\x02uv\x07" +
		"\x1F\x02\x02v,\x03\x02\x02\x02wx\x07 \x02\x02x.\x03\x02\x02\x02yz\x07" +
		"!\x02\x02z0\x03\x02\x02\x02{\x93\x05\x03\x02\x02|\x93\x05\x05\x03\x02" +
		"}\x93\x05\x07\x04\x02~\x93\x05\t\x05\x02\x7F\x93\x05\v\x06\x02\x80\x93" +
		"\x05\r\x07\x02\x81\x93\x05\x0F\b\x02\x82\x93\x05\x11\t\x02\x83\x93\x05" +
		"\x13\n\x02\x84\x93\x05\x15\v\x02\x85\x93\x05\x17\f\x02\x86\x93\x05\x19" +
		"\r\x02\x87\x93\x05\x1B\x0E\x02\x88\x93\x05\x1D\x0F\x02\x89\x93\x05\x1F" +
		"\x10\x02\x8A\x93\x05!\x11\x02\x8B\x93\x05#\x12\x02\x8C\x93\x05%\x13\x02" +
		"\x8D\x93\x05\'\x14\x02\x8E\x93\x05)\x15\x02\x8F\x93\x05+\x16\x02\x90\x93" +
		"\x05-\x17\x02\x91\x93\x05/\x18\x02\x92{\x03\x02\x02\x02\x92|\x03\x02\x02" +
		"\x02\x92}\x03\x02\x02\x02\x92~\x03\x02\x02\x02\x92\x7F\x03\x02\x02\x02" +
		"\x92\x80\x03\x02\x02\x02\x92\x81\x03\x02\x02\x02\x92\x82\x03\x02\x02\x02" +
		"\x92\x83\x03\x02\x02\x02\x92\x84\x03\x02\x02\x02\x92\x85\x03\x02\x02\x02" +
		"\x92\x86\x03\x02\x02\x02\x92\x87\x03\x02\x02\x02\x92\x88\x03\x02\x02\x02" +
		"\x92\x89\x03\x02\x02\x02\x92\x8A\x03\x02\x02\x02\x92\x8B\x03\x02\x02\x02" +
		"\x92\x8C\x03\x02\x02\x02\x92\x8D\x03\x02\x02\x02\x92\x8E\x03\x02\x02\x02" +
		"\x92\x8F\x03\x02\x02\x02\x92\x90\x03\x02\x02\x02\x92\x91\x03\x02\x02\x02" +
		"\x932\x03\x02\x02\x02\x94\x95\x042;\x02\x954\x03\x02\x02\x02\x96\x97\t" +
		"\x02\x02\x02\x976\x03\x02\x02\x02\x98\x99\t\x03\x02\x02\x998\x03\x02\x02" +
		"\x02\x9A\x9B\x057\x1C\x02\x9B\x9C\x06\x1D\x02\x02\x9C\x9D\b\x1D\x02\x02" +
		"\x9D\xB0\x03\x02\x02\x02\x9E\x9F\x05\x19\r\x02\x9F\xA0\x05\x13\n\x02\xA0" +
		"\xA1\x06\x1D\x03\x02\xA1\xA2\b\x1D\x03\x02\xA2\xB0\x03\x02\x02\x02\xA3" +
		"\xA4\x05\x19\r\x02\xA4\xA5\x06\x1D\x04\x02\xA5\xA6\b\x1D\x04\x02\xA6\xB0" +
		"\x03\x02\x02\x02\xA7\xA8\x05\x13\n\x02\xA8\xA9\x06\x1D\x05\x02\xA9\xAA" +
		"\b\x1D\x05\x02\xAA\xB0\x03\x02\x02\x02\xAB\xAC\x051\x19\x02\xAC\xAD\x06" +
		"\x1D\x06\x02\xAD\xAE\b\x1D\x06\x02\xAE\xB0\x03\x02\x02\x02\xAF\x9A\x03" +
		"\x02\x02\x02\xAF\x9E\x03\x02\x02\x02\xAF\xA3\x03\x02\x02\x02\xAF\xA7\x03" +
		"\x02\x02\x02\xAF\xAB\x03\x02\x02\x02\xB0:\x03\x02\x02\x02\xB1\xB8\x05" +
		"5\x1B\x02\xB2\xB8\x053\x1A\x02\xB3\xB4\x057\x1C\x02\xB4\xB5\x06\x1E\x07" +
		"\x02\xB5\xB6\b\x1E\x07\x02\xB6\xB8\x03\x02\x02\x02\xB7\xB1\x03\x02\x02" +
		"\x02\xB7\xB2\x03\x02\x02\x02\xB7\xB3\x03\x02\x02\x02\xB8<\x03\x02\x02" +
		"\x02\xB9\xBA\x07K\x02\x02\xBA\xBB\x07U\x02\x02\xBB\xBC\x07C\x02\x02\xBC" +
		">\x03\x02\x02\x02\xBD\xBE\x07K\x02\x02\xBE\xBF\x07G\x02\x02\xBF\xC0\x07" +
		"C\x02\x02\xC0@\x03\x02\x02\x02\xC1\xC2\x07I\x02\x02\xC2\xC3\x07U\x02\x02" +
		"\xC3B\x03\x02\x02\x02\xC4\xC5\x07I\x02\x02\xC5\xC6\x07G\x02\x02\xC6D\x03" +
		"\x02\x02\x02\xC7\xC8\x07U\x02\x02\xC8\xC9\x07V\x02\x02\xC9F\x03\x02\x02" +
		"\x02\xCA\xCB\x07U\x02\x02\xCB\xCC\x07G\x02\x02\xCCH\x03\x02\x02\x02\xCD" +
		"\xD0\x055\x1B\x02\xCE\xD1\x055\x1B\x02\xCF\xD1\x053\x1A\x02\xD0\xCE\x03" +
		"\x02\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD6\x03\x02\x02\x02\xD2\xD5\x05" +
		"5\x1B\x02\xD3\xD5\x053\x1A\x02\xD4\xD2\x03\x02\x02\x02\xD4\xD3\x03\x02" +
		"\x02\x02\xD5\xD8\x03\x02\x02\x02\xD6\xD4\x03\x02\x02\x02\xD6\xD7\x03\x02" +
		"\x02\x02\xD7J\x03\x02\x02\x02\xD8\xD6\x03\x02\x02\x02\xD9\xDA\x05\x19" +
		"\r\x02\xDA\xDB\x05\x13\n\x02\xDB\xDC\x06&\b\x02\xDC\xDD\b&\b\x02\xDD\xE3" +
		"\x03\x02\x02\x02\xDE\xDF\x051\x19\x02\xDF\xE0\x06&\t\x02\xE0\xE1\b&\t" +
		"\x02\xE1\xE3\x03\x02\x02\x02\xE2\xD9\x03\x02\x02\x02\xE2\xDE\x03\x02\x02" +
		"\x02\xE3L\x03\x02\x02\x02\n\x02\x92\xAF\xB7\xD0\xD4\xD6\xE2\n\x03\x1D" +
		"\x02\x03\x1D\x03\x03\x1D\x04\x03\x1D\x05\x03\x1D\x06\x03\x1E\x07\x03&" +
		"\b\x03&\t";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!EdiX12Lexer.__ATN) {
			EdiX12Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(EdiX12Lexer._serializedATN));
		}

		return EdiX12Lexer.__ATN;
	}

}

