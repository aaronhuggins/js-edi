lexer grammar EdiFactLexer;

@lexer::header {
// This statement may be removed once option `superClass` is correctly generated by antlr4ts.
import { FactBaseLexer } from "./FactBaseLexer";
}

options {
  superClass=FactBaseLexer;
}

tokens {
  DataSeparator,
  RepititionSeparator,
  ComponentSeparator,
  SegmentTerminator,
  DecimalMark,
  ReleaseIndicator,
  EndOfLine
}

// Fragments for non-printable character detection.
fragment SOH: '\u0001';
fragment STX: '\u0002';
fragment ETX: '\u0003';
fragment EOT: '\u0004';
fragment ENQ: '\u0005';
fragment ACK: '\u0006';
fragment BEL: '\u0007';
fragment HT: '\u0009';
fragment LF: '\u000A';
fragment VT: '\u000B';
fragment FF: '\u000C';
fragment CR: '\u000D';
fragment DC1: '\u0011';
fragment DC2: '\u0012';
fragment DC3: '\u0013';
fragment DC4: '\u0014';
fragment NAK: '\u0015';
fragment SYN: '\u0016';
fragment ETB: '\u0017';
fragment FS: '\u001C';
fragment GS: '\u001D';
fragment RS: '\u001E';
fragment US: '\u001F';
fragment AsciiControl:
    SOH | STX
  | ETX | EOT
  | ENQ | ACK
  | BEL | HT
  | LF | VT
  | FF | CR
  | DC1 | DC2
  | DC3 | DC4
  | NAK | SYN
  | ETB | FS
  | GS | RS
  | US;

// Fragments for printable character detection.
fragment Number: '\u0030'..'\u0039';
fragment Letter: '\u0041'..'\u005A' | '\u0061'..'\u007A';
fragment Special: '\u0020'..'\u002F' | '\u003A'..'\u0040' | '\u005B'..'\u0060' | '\u007B'..'\u007E';

// Special token for discovering the position of control characters for a given EDI document.
ControlChar:
    Special { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }
  | CR LF { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }
  | CR { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }
  | LF { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }
  | AsciiControl { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) };

// All valid printable characters.
Char:
    Letter
  | Number
  | Special { !this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) };

// Reserved segment tags.
SvcStringAdvice: 'UNA' { this.handleUNA() };
InterchangeHeader: 'UNB';
InterchangeTrailer: 'UNZ';
GroupHeader: 'UNG';
GroupTrailer: 'UNE';
MessageHeader: 'UNH';
MessageTrailer: 'UNT';
TextSegment: 'TXT';
SectionControl: 'UNS';

// All other segment tags.
Tag: Letter (Letter|Number) (Letter|Number)*;

// All non-printable and formatting marks
NonPrintable:
    CR LF { !this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }
  | AsciiControl { !this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) };
